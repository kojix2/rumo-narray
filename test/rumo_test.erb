require 'erb'
TYPES = %w[UInt8 Int8 UInt16 Int16 UInt32 Int32 UInt64 Int64 Float32 SFloat Float64 DFloat]
FLOAT_TYPES = TYPES.filter{|t| t =~ /Float/}
code = ERB.new(DATA.read, trim_mode: '-').result(binding)
Dir.chdir(__dir__) { File.write("rumo_test.rb", code) }
__END__
# frozen_string_literal: true
# This file is generated by ERB. Do not edit.

require 'test_helper'

class RumoTest < Test::Unit::TestCase
  test 'VERSION' do
    assert do
      ::Rumo.const_defined?(:VERSION)
    end
  end

  test 'new0' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.new(0))
    <%- end -%>
  end

  test 'new1' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.new(1))
    <%- end -%>
  end

  test 'new2' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.new(1, 2))
    <%- end -%>
  end

  test 'new3' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.new(1, 2, 3))
    <%- end -%>
  end

  test 'new4' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.new(1, 2, 3, 4))
    <%- end -%>
  end

  test 'zeros0' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.zeros(0))
    <%- end -%>
  end

  test 'zeros1' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.zeros(1))
    <%- end -%>
  end

  test 'zeros2' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.zeros(1, 2))
    <%- end -%>
  end

  test 'zeros3' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.zeros(1, 2, 3))
    <%- end -%>
  end

  test 'ones0' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.ones(0))
    <%- end -%>
  end

  test 'ones1' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.ones(1))
    <%- end -%>
  end

  test 'ones2' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.ones(1, 2))
    <%- end -%>
  end

  test 'ones3' do
    <%- TYPES.each do |type| -%>
    assert_instance_of(::Rumo::<%= type %>, Rumo::<%= type %>.ones(1, 2, 3))
    <%- end -%>
  end

  test 'shape0' do
    <%- TYPES.each do |type| -%>
    assert_equal([0], Rumo::<%= type %>.new(0).shape)
    <%- end -%>
  end

  test 'shape1' do
    <%- TYPES.each do |type| -%>
    assert_equal([1], Rumo::<%= type %>.new(1).shape)
    <%- end -%>
  end

  test 'shape2' do
    <%- TYPES.each do |type| -%>
    assert_equal([1, 2], Rumo::<%= type %>.new(1, 2).shape)
    <%- end -%>
  end

  test 'shape3' do
    <%- TYPES.each do |type| -%>
    assert_equal([1, 2, 3], Rumo::<%= type %>.new(1, 2, 3).shape)
    <%- end -%>
  end

  test 'ndim0' do
    <%- TYPES.each do |type| -%>
    assert_equal(1, Rumo::<%= type %>.new(0).ndim)
    <%- end -%>
  end

  test 'ndim1' do
    <%- TYPES.each do |type| -%>
    assert_equal(1, Rumo::<%= type %>.new(1).ndim)
    <%- end -%>
  end

  test 'ndim2' do
    <%- TYPES.each do |type| -%>
    assert_equal(2, Rumo::<%= type %>.new(1, 2).ndim)
    <%- end -%>
  end

  test 'ndim3' do
    <%- TYPES.each do |type| -%>
    assert_equal(3, Rumo::<%= type %>.new(1, 2, 3).ndim)
    <%- end -%>
  end

  test 'size0' do
    <%- TYPES.each do |type| -%>
    assert_equal(0, Rumo::<%= type %>.new(0).size)
    <%- end -%>
  end

  test 'length0' do
    <%- TYPES.each do |type| -%>
    assert_equal(0, Rumo::<%= type %>.new(0).length)
    <%- end -%>
  end

  test 'size1' do
    <%- TYPES.each do |type| -%>
    assert_equal(1, Rumo::<%= type %>.new(1).size)
    <%- end -%>
  end

  test 'length1' do
    <%- TYPES.each do |type| -%>
    assert_equal(1, Rumo::<%= type %>.new(1).length)
    <%- end -%>
  end

  test 'size2' do
    <%- TYPES.each do |type| -%>
    assert_equal(2, Rumo::<%= type %>.new(1, 2).size)
    <%- end -%>
  end

  test 'length2' do
    <%- TYPES.each do |type| -%>
    assert_equal(2, Rumo::<%= type %>.new(1, 2).length)
    <%- end -%>
  end

  test 'size3' do
    <%- TYPES.each do |type| -%>
    assert_equal(6, Rumo::<%= type %>.new(1, 2, 3).size)
    <%- end -%>
  end

  test 'length3' do
    <%- TYPES.each do |type| -%>
    assert_equal(6, Rumo::<%= type %>.new(1, 2, 3).length)
    <%- end -%>
  end

  test 'sum' do
    <%- TYPES.each do |type| -%>
    assert_equal(24, Rumo::<%= type %>.ones(2,3,4).sum)
    <%- end -%>
  end

  test 'prod' do
    <%- TYPES.each do |type| -%>
    assert_equal(1, Rumo::<%= type %>.ones(2,3,4).prod)
    <%- end -%>
  end

  test 'fill' do
    <%- TYPES.each do |type| -%>
    assert_equal(48, Rumo::<%= type %>.ones(2,3,4).fill(2).sum)
    <%- end -%>
  end

  test 'linspace' do
    <%- FLOAT_TYPES.each do |type| -%>
    assert_equal(10, Rumo::<%= type %>.linspace(0, 4, 5).sum)
    <%- end -%>
  end
end
