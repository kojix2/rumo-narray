# frozen_string_literal: true
# This file is generated by ERB. Do not edit.

require 'test_helper'

class RumoTest < Test::Unit::TestCase
  test 'VERSION' do
    assert do
      ::Rumo.const_defined?(:VERSION)
    end
  end

  test 'new0' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.new(0))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.new(0))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.new(0))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.new(0))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.new(0))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.new(0))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.new(0))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.new(0))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.new(0))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.new(0))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.new(0))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.new(0))
  end

  test 'new1' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.new(1))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.new(1))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.new(1))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.new(1))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.new(1))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.new(1))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.new(1))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.new(1))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.new(1))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.new(1))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.new(1))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.new(1))
  end

  test 'new2' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.new(1, 2))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.new(1, 2))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.new(1, 2))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.new(1, 2))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.new(1, 2))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.new(1, 2))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.new(1, 2))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.new(1, 2))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.new(1, 2))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.new(1, 2))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.new(1, 2))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.new(1, 2))
  end

  test 'new3' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.new(1, 2, 3))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.new(1, 2, 3))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.new(1, 2, 3))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.new(1, 2, 3))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.new(1, 2, 3))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.new(1, 2, 3))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.new(1, 2, 3))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.new(1, 2, 3))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.new(1, 2, 3))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.new(1, 2, 3))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.new(1, 2, 3))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.new(1, 2, 3))
  end

  test 'new4' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.new(1, 2, 3, 4))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.new(1, 2, 3, 4))
  end

  test 'zeros0' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.zeros(0))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.zeros(0))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.zeros(0))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.zeros(0))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.zeros(0))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.zeros(0))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.zeros(0))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.zeros(0))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.zeros(0))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.zeros(0))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.zeros(0))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.zeros(0))
  end

  test 'zeros1' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.zeros(1))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.zeros(1))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.zeros(1))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.zeros(1))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.zeros(1))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.zeros(1))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.zeros(1))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.zeros(1))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.zeros(1))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.zeros(1))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.zeros(1))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.zeros(1))
  end

  test 'zeros2' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.zeros(1, 2))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.zeros(1, 2))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.zeros(1, 2))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.zeros(1, 2))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.zeros(1, 2))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.zeros(1, 2))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.zeros(1, 2))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.zeros(1, 2))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.zeros(1, 2))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.zeros(1, 2))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.zeros(1, 2))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.zeros(1, 2))
  end

  test 'zeros3' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.zeros(1, 2, 3))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.zeros(1, 2, 3))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.zeros(1, 2, 3))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.zeros(1, 2, 3))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.zeros(1, 2, 3))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.zeros(1, 2, 3))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.zeros(1, 2, 3))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.zeros(1, 2, 3))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.zeros(1, 2, 3))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.zeros(1, 2, 3))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.zeros(1, 2, 3))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.zeros(1, 2, 3))
  end

  test 'ones0' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.ones(0))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.ones(0))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.ones(0))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.ones(0))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.ones(0))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.ones(0))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.ones(0))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.ones(0))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.ones(0))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.ones(0))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.ones(0))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.ones(0))
  end

  test 'ones1' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.ones(1))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.ones(1))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.ones(1))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.ones(1))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.ones(1))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.ones(1))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.ones(1))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.ones(1))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.ones(1))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.ones(1))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.ones(1))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.ones(1))
  end

  test 'ones2' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.ones(1, 2))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.ones(1, 2))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.ones(1, 2))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.ones(1, 2))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.ones(1, 2))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.ones(1, 2))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.ones(1, 2))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.ones(1, 2))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.ones(1, 2))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.ones(1, 2))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.ones(1, 2))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.ones(1, 2))
  end

  test 'ones3' do
    assert_instance_of(::Rumo::UInt8, Rumo::UInt8.ones(1, 2, 3))
    assert_instance_of(::Rumo::Int8, Rumo::Int8.ones(1, 2, 3))
    assert_instance_of(::Rumo::UInt16, Rumo::UInt16.ones(1, 2, 3))
    assert_instance_of(::Rumo::Int16, Rumo::Int16.ones(1, 2, 3))
    assert_instance_of(::Rumo::UInt32, Rumo::UInt32.ones(1, 2, 3))
    assert_instance_of(::Rumo::Int32, Rumo::Int32.ones(1, 2, 3))
    assert_instance_of(::Rumo::UInt64, Rumo::UInt64.ones(1, 2, 3))
    assert_instance_of(::Rumo::Int64, Rumo::Int64.ones(1, 2, 3))
    assert_instance_of(::Rumo::Float32, Rumo::Float32.ones(1, 2, 3))
    assert_instance_of(::Rumo::SFloat, Rumo::SFloat.ones(1, 2, 3))
    assert_instance_of(::Rumo::Float64, Rumo::Float64.ones(1, 2, 3))
    assert_instance_of(::Rumo::DFloat, Rumo::DFloat.ones(1, 2, 3))
  end

  test 'shape0' do
    assert_equal([0], Rumo::UInt8.new(0).shape)
    assert_equal([0], Rumo::Int8.new(0).shape)
    assert_equal([0], Rumo::UInt16.new(0).shape)
    assert_equal([0], Rumo::Int16.new(0).shape)
    assert_equal([0], Rumo::UInt32.new(0).shape)
    assert_equal([0], Rumo::Int32.new(0).shape)
    assert_equal([0], Rumo::UInt64.new(0).shape)
    assert_equal([0], Rumo::Int64.new(0).shape)
    assert_equal([0], Rumo::Float32.new(0).shape)
    assert_equal([0], Rumo::SFloat.new(0).shape)
    assert_equal([0], Rumo::Float64.new(0).shape)
    assert_equal([0], Rumo::DFloat.new(0).shape)
  end

  test 'shape1' do
    assert_equal([1], Rumo::UInt8.new(1).shape)
    assert_equal([1], Rumo::Int8.new(1).shape)
    assert_equal([1], Rumo::UInt16.new(1).shape)
    assert_equal([1], Rumo::Int16.new(1).shape)
    assert_equal([1], Rumo::UInt32.new(1).shape)
    assert_equal([1], Rumo::Int32.new(1).shape)
    assert_equal([1], Rumo::UInt64.new(1).shape)
    assert_equal([1], Rumo::Int64.new(1).shape)
    assert_equal([1], Rumo::Float32.new(1).shape)
    assert_equal([1], Rumo::SFloat.new(1).shape)
    assert_equal([1], Rumo::Float64.new(1).shape)
    assert_equal([1], Rumo::DFloat.new(1).shape)
  end

  test 'shape2' do
    assert_equal([1, 2], Rumo::UInt8.new(1, 2).shape)
    assert_equal([1, 2], Rumo::Int8.new(1, 2).shape)
    assert_equal([1, 2], Rumo::UInt16.new(1, 2).shape)
    assert_equal([1, 2], Rumo::Int16.new(1, 2).shape)
    assert_equal([1, 2], Rumo::UInt32.new(1, 2).shape)
    assert_equal([1, 2], Rumo::Int32.new(1, 2).shape)
    assert_equal([1, 2], Rumo::UInt64.new(1, 2).shape)
    assert_equal([1, 2], Rumo::Int64.new(1, 2).shape)
    assert_equal([1, 2], Rumo::Float32.new(1, 2).shape)
    assert_equal([1, 2], Rumo::SFloat.new(1, 2).shape)
    assert_equal([1, 2], Rumo::Float64.new(1, 2).shape)
    assert_equal([1, 2], Rumo::DFloat.new(1, 2).shape)
  end

  test 'shape3' do
    assert_equal([1, 2, 3], Rumo::UInt8.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::Int8.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::UInt16.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::Int16.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::UInt32.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::Int32.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::UInt64.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::Int64.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::Float32.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::SFloat.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::Float64.new(1, 2, 3).shape)
    assert_equal([1, 2, 3], Rumo::DFloat.new(1, 2, 3).shape)
  end

  test 'ndim0' do
    assert_equal(1, Rumo::UInt8.new(0).ndim)
    assert_equal(1, Rumo::Int8.new(0).ndim)
    assert_equal(1, Rumo::UInt16.new(0).ndim)
    assert_equal(1, Rumo::Int16.new(0).ndim)
    assert_equal(1, Rumo::UInt32.new(0).ndim)
    assert_equal(1, Rumo::Int32.new(0).ndim)
    assert_equal(1, Rumo::UInt64.new(0).ndim)
    assert_equal(1, Rumo::Int64.new(0).ndim)
    assert_equal(1, Rumo::Float32.new(0).ndim)
    assert_equal(1, Rumo::SFloat.new(0).ndim)
    assert_equal(1, Rumo::Float64.new(0).ndim)
    assert_equal(1, Rumo::DFloat.new(0).ndim)
  end

  test 'ndim1' do
    assert_equal(1, Rumo::UInt8.new(1).ndim)
    assert_equal(1, Rumo::Int8.new(1).ndim)
    assert_equal(1, Rumo::UInt16.new(1).ndim)
    assert_equal(1, Rumo::Int16.new(1).ndim)
    assert_equal(1, Rumo::UInt32.new(1).ndim)
    assert_equal(1, Rumo::Int32.new(1).ndim)
    assert_equal(1, Rumo::UInt64.new(1).ndim)
    assert_equal(1, Rumo::Int64.new(1).ndim)
    assert_equal(1, Rumo::Float32.new(1).ndim)
    assert_equal(1, Rumo::SFloat.new(1).ndim)
    assert_equal(1, Rumo::Float64.new(1).ndim)
    assert_equal(1, Rumo::DFloat.new(1).ndim)
  end

  test 'ndim2' do
    assert_equal(2, Rumo::UInt8.new(1, 2).ndim)
    assert_equal(2, Rumo::Int8.new(1, 2).ndim)
    assert_equal(2, Rumo::UInt16.new(1, 2).ndim)
    assert_equal(2, Rumo::Int16.new(1, 2).ndim)
    assert_equal(2, Rumo::UInt32.new(1, 2).ndim)
    assert_equal(2, Rumo::Int32.new(1, 2).ndim)
    assert_equal(2, Rumo::UInt64.new(1, 2).ndim)
    assert_equal(2, Rumo::Int64.new(1, 2).ndim)
    assert_equal(2, Rumo::Float32.new(1, 2).ndim)
    assert_equal(2, Rumo::SFloat.new(1, 2).ndim)
    assert_equal(2, Rumo::Float64.new(1, 2).ndim)
    assert_equal(2, Rumo::DFloat.new(1, 2).ndim)
  end

  test 'ndim3' do
    assert_equal(3, Rumo::UInt8.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::Int8.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::UInt16.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::Int16.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::UInt32.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::Int32.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::UInt64.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::Int64.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::Float32.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::SFloat.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::Float64.new(1, 2, 3).ndim)
    assert_equal(3, Rumo::DFloat.new(1, 2, 3).ndim)
  end

  test 'size0' do
    assert_equal(0, Rumo::UInt8.new(0).size)
    assert_equal(0, Rumo::Int8.new(0).size)
    assert_equal(0, Rumo::UInt16.new(0).size)
    assert_equal(0, Rumo::Int16.new(0).size)
    assert_equal(0, Rumo::UInt32.new(0).size)
    assert_equal(0, Rumo::Int32.new(0).size)
    assert_equal(0, Rumo::UInt64.new(0).size)
    assert_equal(0, Rumo::Int64.new(0).size)
    assert_equal(0, Rumo::Float32.new(0).size)
    assert_equal(0, Rumo::SFloat.new(0).size)
    assert_equal(0, Rumo::Float64.new(0).size)
    assert_equal(0, Rumo::DFloat.new(0).size)
  end

  test 'length0' do
    assert_equal(0, Rumo::UInt8.new(0).length)
    assert_equal(0, Rumo::Int8.new(0).length)
    assert_equal(0, Rumo::UInt16.new(0).length)
    assert_equal(0, Rumo::Int16.new(0).length)
    assert_equal(0, Rumo::UInt32.new(0).length)
    assert_equal(0, Rumo::Int32.new(0).length)
    assert_equal(0, Rumo::UInt64.new(0).length)
    assert_equal(0, Rumo::Int64.new(0).length)
    assert_equal(0, Rumo::Float32.new(0).length)
    assert_equal(0, Rumo::SFloat.new(0).length)
    assert_equal(0, Rumo::Float64.new(0).length)
    assert_equal(0, Rumo::DFloat.new(0).length)
  end

  test 'size1' do
    assert_equal(1, Rumo::UInt8.new(1).size)
    assert_equal(1, Rumo::Int8.new(1).size)
    assert_equal(1, Rumo::UInt16.new(1).size)
    assert_equal(1, Rumo::Int16.new(1).size)
    assert_equal(1, Rumo::UInt32.new(1).size)
    assert_equal(1, Rumo::Int32.new(1).size)
    assert_equal(1, Rumo::UInt64.new(1).size)
    assert_equal(1, Rumo::Int64.new(1).size)
    assert_equal(1, Rumo::Float32.new(1).size)
    assert_equal(1, Rumo::SFloat.new(1).size)
    assert_equal(1, Rumo::Float64.new(1).size)
    assert_equal(1, Rumo::DFloat.new(1).size)
  end

  test 'length1' do
    assert_equal(1, Rumo::UInt8.new(1).length)
    assert_equal(1, Rumo::Int8.new(1).length)
    assert_equal(1, Rumo::UInt16.new(1).length)
    assert_equal(1, Rumo::Int16.new(1).length)
    assert_equal(1, Rumo::UInt32.new(1).length)
    assert_equal(1, Rumo::Int32.new(1).length)
    assert_equal(1, Rumo::UInt64.new(1).length)
    assert_equal(1, Rumo::Int64.new(1).length)
    assert_equal(1, Rumo::Float32.new(1).length)
    assert_equal(1, Rumo::SFloat.new(1).length)
    assert_equal(1, Rumo::Float64.new(1).length)
    assert_equal(1, Rumo::DFloat.new(1).length)
  end

  test 'size2' do
    assert_equal(2, Rumo::UInt8.new(1, 2).size)
    assert_equal(2, Rumo::Int8.new(1, 2).size)
    assert_equal(2, Rumo::UInt16.new(1, 2).size)
    assert_equal(2, Rumo::Int16.new(1, 2).size)
    assert_equal(2, Rumo::UInt32.new(1, 2).size)
    assert_equal(2, Rumo::Int32.new(1, 2).size)
    assert_equal(2, Rumo::UInt64.new(1, 2).size)
    assert_equal(2, Rumo::Int64.new(1, 2).size)
    assert_equal(2, Rumo::Float32.new(1, 2).size)
    assert_equal(2, Rumo::SFloat.new(1, 2).size)
    assert_equal(2, Rumo::Float64.new(1, 2).size)
    assert_equal(2, Rumo::DFloat.new(1, 2).size)
  end

  test 'length2' do
    assert_equal(2, Rumo::UInt8.new(1, 2).length)
    assert_equal(2, Rumo::Int8.new(1, 2).length)
    assert_equal(2, Rumo::UInt16.new(1, 2).length)
    assert_equal(2, Rumo::Int16.new(1, 2).length)
    assert_equal(2, Rumo::UInt32.new(1, 2).length)
    assert_equal(2, Rumo::Int32.new(1, 2).length)
    assert_equal(2, Rumo::UInt64.new(1, 2).length)
    assert_equal(2, Rumo::Int64.new(1, 2).length)
    assert_equal(2, Rumo::Float32.new(1, 2).length)
    assert_equal(2, Rumo::SFloat.new(1, 2).length)
    assert_equal(2, Rumo::Float64.new(1, 2).length)
    assert_equal(2, Rumo::DFloat.new(1, 2).length)
  end

  test 'size3' do
    assert_equal(6, Rumo::UInt8.new(1, 2, 3).size)
    assert_equal(6, Rumo::Int8.new(1, 2, 3).size)
    assert_equal(6, Rumo::UInt16.new(1, 2, 3).size)
    assert_equal(6, Rumo::Int16.new(1, 2, 3).size)
    assert_equal(6, Rumo::UInt32.new(1, 2, 3).size)
    assert_equal(6, Rumo::Int32.new(1, 2, 3).size)
    assert_equal(6, Rumo::UInt64.new(1, 2, 3).size)
    assert_equal(6, Rumo::Int64.new(1, 2, 3).size)
    assert_equal(6, Rumo::Float32.new(1, 2, 3).size)
    assert_equal(6, Rumo::SFloat.new(1, 2, 3).size)
    assert_equal(6, Rumo::Float64.new(1, 2, 3).size)
    assert_equal(6, Rumo::DFloat.new(1, 2, 3).size)
  end

  test 'length3' do
    assert_equal(6, Rumo::UInt8.new(1, 2, 3).length)
    assert_equal(6, Rumo::Int8.new(1, 2, 3).length)
    assert_equal(6, Rumo::UInt16.new(1, 2, 3).length)
    assert_equal(6, Rumo::Int16.new(1, 2, 3).length)
    assert_equal(6, Rumo::UInt32.new(1, 2, 3).length)
    assert_equal(6, Rumo::Int32.new(1, 2, 3).length)
    assert_equal(6, Rumo::UInt64.new(1, 2, 3).length)
    assert_equal(6, Rumo::Int64.new(1, 2, 3).length)
    assert_equal(6, Rumo::Float32.new(1, 2, 3).length)
    assert_equal(6, Rumo::SFloat.new(1, 2, 3).length)
    assert_equal(6, Rumo::Float64.new(1, 2, 3).length)
    assert_equal(6, Rumo::DFloat.new(1, 2, 3).length)
  end

  test 'sum' do
    assert_equal(24, Rumo::UInt8.ones(2,3,4).sum)
    assert_equal(24, Rumo::Int8.ones(2,3,4).sum)
    assert_equal(24, Rumo::UInt16.ones(2,3,4).sum)
    assert_equal(24, Rumo::Int16.ones(2,3,4).sum)
    assert_equal(24, Rumo::UInt32.ones(2,3,4).sum)
    assert_equal(24, Rumo::Int32.ones(2,3,4).sum)
    assert_equal(24, Rumo::UInt64.ones(2,3,4).sum)
    assert_equal(24, Rumo::Int64.ones(2,3,4).sum)
    assert_equal(24, Rumo::Float32.ones(2,3,4).sum)
    assert_equal(24, Rumo::SFloat.ones(2,3,4).sum)
    assert_equal(24, Rumo::Float64.ones(2,3,4).sum)
    assert_equal(24, Rumo::DFloat.ones(2,3,4).sum)
  end

  test 'prod' do
    assert_equal(1, Rumo::UInt8.ones(2,3,4).prod)
    assert_equal(1, Rumo::Int8.ones(2,3,4).prod)
    assert_equal(1, Rumo::UInt16.ones(2,3,4).prod)
    assert_equal(1, Rumo::Int16.ones(2,3,4).prod)
    assert_equal(1, Rumo::UInt32.ones(2,3,4).prod)
    assert_equal(1, Rumo::Int32.ones(2,3,4).prod)
    assert_equal(1, Rumo::UInt64.ones(2,3,4).prod)
    assert_equal(1, Rumo::Int64.ones(2,3,4).prod)
    assert_equal(1, Rumo::Float32.ones(2,3,4).prod)
    assert_equal(1, Rumo::SFloat.ones(2,3,4).prod)
    assert_equal(1, Rumo::Float64.ones(2,3,4).prod)
    assert_equal(1, Rumo::DFloat.ones(2,3,4).prod)
  end

  test 'fill' do
    assert_equal(48, Rumo::UInt8.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::Int8.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::UInt16.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::Int16.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::UInt32.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::Int32.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::UInt64.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::Int64.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::Float32.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::SFloat.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::Float64.ones(2,3,4).fill(2).sum)
    assert_equal(48, Rumo::DFloat.ones(2,3,4).fill(2).sum)
  end

  test 'linspace' do
    assert_equal(10, Rumo::Float32.linspace(0, 4, 5).sum)
    assert_equal(10, Rumo::SFloat.linspace(0, 4, 5).sum)
    assert_equal(10, Rumo::Float64.linspace(0, 4, 5).sum)
    assert_equal(10, Rumo::DFloat.linspace(0, 4, 5).sum)
  end
end
